// Generated by CoffeeScript 1.7.1
(function() {
  define(function() {
    var makeBeam, makeBeams, makeCylinder, makeSoftSphere, makeSphere;
    makeCylinder = function(radius, height, color, opacity) {
      var geometry, material;
      geometry = new THREE.CylinderGeometry(radius, radius, height, 32);
      material = new THREE.MeshBasicMaterial({
        color: color,
        transparent: true,
        opacity: opacity
      });
      return new THREE.Mesh(geometry, material);
    };
    makeSphere = function(radius, color, opacity) {
      var geometry, material;
      geometry = new THREE.SphereGeometry(radius, 32, 32);
      material = new THREE.MeshBasicMaterial({
        color: color,
        transparent: true,
        opacity: opacity
      });
      return new THREE.Mesh(geometry, material);
    };
    makeBeam = function(radius, height, steps, stepSize, color, opacity) {
      var beam, x;
      opacity = opacity / steps;
      beam = new THREE.Object3D();
      while (steps -= 1) {
        x = makeCylinder(radius, height, color, opacity);
        beam.add(x);
        radius -= stepSize;
      }
      return beam;
    };
    makeBeams = function(numBeams, scale, color, opacity) {
      var beam, heightFactor, pillar, translateSpread;
      pillar = new THREE.Object3D();
      while (numBeams -= 1) {
        heightFactor = THREE.Math.randFloat(1, 4);
        translateSpread = (4 - heightFactor) * scale;
        beam = makeBeam(0.1 * scale, Math.pow(heightFactor, 3) * scale, 2, 0.05 * scale, color, opacity);
        beam.translateX(THREE.Math.randFloatSpread(translateSpread));
        beam.translateZ(THREE.Math.randFloatSpread(translateSpread));
        pillar.add(beam);
      }
      return pillar;
    };
    makeSoftSphere = function(radius, opacity, color, steps, stepSize) {
      var sphere;
      sphere = new THREE.Object3D();
      while (steps -= 1) {
        sphere.add(makeSphere(radius, color, opacity));
        radius -= stepSize;
      }
      return sphere;
    };
    return function(settings) {
      var clouds, lightPillar, particles;
      lightPillar = new THREE.Object3D();
      particles = settings.beamParticles;
      clouds = settings.beamClouds;
      lightPillar.add(makeBeams(clouds.quantity, clouds.scale, clouds.color3(), clouds.opacity));
      lightPillar.add(makeSphere(1.5 * clouds.scale, clouds.color3(), clouds.opacity * 7));
      return lightPillar;
    };
  });

}).call(this);

//# sourceMappingURL=lightPillar.map
